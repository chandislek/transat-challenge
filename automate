
#AUTOMATE EMBARQUE RASPBERRY 3B+ 'Raspberry Pi 3 B Plus' armhf architecture

1)Système d'exploitation : LINUX
https://www.raspberrypi.org/downloads/
l'image RASPBIAN est enregistrée une carte SDmini 8Gb
avec SSH activé , login pi , hostname raspberrypi, raspberry

fichier bloc note "wpa_supplicant.conf" :
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=FR
network={
    ssid="Bbox_EXT"
    psk=""
}

fichier bloc note "ssh" vide :
enregistrer sans extension avec l'utilisation des "" autour du nom

connection par terminal texte depuis PC @raspberrypi:
https://www.putty.org/

connexion par VNC depuis terminal PC avec serverVNC activé:
sudo raspi-config
5-interfacing Options
VNC on
SPI on
I2C on

7-advanced Options
A1-expand Filesystem

3-boot Options
B1-desktops
console ou desktop

connection par VNCviewer sur PC @raspberrypi:
https://www.realvnc.com/fr/connect/download/viewer/windows/

la création d'un fichier de programme python3 : 
sudo nano chandislek.py
exécution du fichier :
sudo python chandislek.py
affiche un fichier :
cat chandislek.py

carte extension capteur : GROVEPI+ dexter seeed Arduino Uno 
https://www.youtube.com/watch?v=lsaXVRk6mKE
Brancher carte grovepi plus ;
En terminal : Autoriser I2c dans sudo raspi-config

récupérer des fichiers sur internet et installation de la bibliothèque grovepi de DEXTER :
curl -kL dexterindustries.com/update_grovepi | bash

ou récupérer le repository grovepi :
mkdir ~/Dexter
cd /home/pi/Dexter
git clone https://github.com/DexterInd/GrovePi.git
cd /home/pi/Dexter/GrovePi/Script
bash ./update_grovepi.sh

ou la bibliothèque grovepi de SEEED:
curl -sL https://github.com/Seeed-Studio/grove.py/raw/master/install.sh | sudo bash -s –
git clone https://github.com/Seeed-Studio/Grove_Base_Kit_Sketchbook
git clone https://github.com/Seeed-Studio/grove.py
git clone https://github.com/Seeed-Studio/GrovePi

flash le dernier firmware dans GrovePi Arduino par la connection SPI:
cd /home/pi/Dexter/GrovePi/Firmware
bash firmware_update.sh

multiple GrovePi :
https://www.dexterindustries.com/GrovePi/programming/using-multiple-grovepis-together/

documentation API : 
https://seeed-studio.github.io/grove.py/

forum :
https://forum.seeedstudio.com/

vérification liaison RASPI-GROVEPI+ pour lecture-écriture sur capteurs-actionneurs:
sudo i2cdetect -y 1
test LCD :
cd /home/pi/Dexter/GrovePi/Software/Python/grove_rgb_lcd
python grove_rgb_lcd.py

Vérification liaison SPI pour écrire HEX dans arduino:
ls -l /dev/spidev*

broches du RASPI (26 ou 40) :
pour motorisation ESC en PWM, 12
série UART TX-RX RPIser, 8-10
I2C, 3-5
SPI, 19-21-23-24-26
GPIO, 7-11-13-15-12-16-18-22
GPIO étendu, 29-31-33-35-37-32-36-38-40
DNC EEPROM, 27-28

connection des modules grove :
Grove – Relay > D2
Grove – Temp&Humi Sensor > D3
Grove – Ultrasonic Ranger > D4
Grove – LED Bar V2.0 > D5        sudo python ledbar.py
Grove – Buzzer > D6
Grove – Button > D7
Grove – Rotary Angle Sensor > A0 sudo python rotary.py
Grove – Sound Sensor > A1
Grove – Light Sensor > A2
Grove – LCD Display > I2C

connection des moteurs en PWM :
GPIO 17 (phrase PWM IN1) pin11
GPIO 27 (phrase PWM IN2) pin13
GPIO 22 (phrase PWM IN3) pin15
GPIO 23 (phrase PWM IN4) pin16
GND                      pin6
VCC                      pin4
VM

bibliothèque de commande des ports GPIO :
sudo apt install rpi.gpio

séquence de commande de moteur 4 phases unipolaire (0-5V) 8 séquences:
SEQ1	SEQ2	SEQ3	SEQ4	SEQ5	SEQ6	SEQ7	SEQ8
IN4	1	1	0	0	0	0	0	1
IN3	0	1	1	1	0	0	0	0
IN2	0	0	0	1	1	1	0	0
IN1	0	0	0	0	0	1	1	1
wget https://peppe8o.com/wp-content/uploads/2020/02/stepper.py

https://deusyss.developpez.com/tutoriels/RaspberryPi/PythonEtLeGpio/
https://pypi.org/project/python-periphery/
https://github.com/vsergeev/python-periphery

module GROVE driver moteur :
https://wiki.seeedstudio.com/Grove-I2C_Motor_Driver-TB6612FNG/
https://pypi.org/project/raspberry-i2c-tb6612fng/
https://wiki.seeedstudio.com/Grove-I2C-Motor-Driver-L298P/



2) Lecture des fichiers météorologiques : GRIB 2
https://confluence.ecmwf.int//display/ECC/ecCodes+Home
l'interface en Python3 des ecCodes se fait conformément à  PyPI https://pypi.org/project/eccodes/

les prévisions sont disponibles librement sur météoFrance
https://donneespubliques.meteofrance.fr/?fond=produit&id_produit=130&id_rubrique=51

3) système surveillance vidéo: motionEyeOS
https://github.com/ccrisan/motioneyeos/wiki

4) système détection d'obstacle : YOLO darknet et VPU MOVIDIUS NCS 2
bibliothèque VPU : openVino
bibliothèque détection d'obstacle : opencv

5)système d'exploitation navigation : openplotter
http://www.sailoog.com/openplotter
https://openplotter.readthedocs.io/en/latest/getting_started/downloading.html

logiciel traceur : openCPN
https://opencpn.org/OpenCPN/info/downloads.html
autopilote: 
http://pypilot.org/wiki/doku.php


6)carte d'interface physique :
-capteurs
module GROVE et CAN NMEA
http://www.aplr.fr/wp-content/uploads/NMEA2000_APLR_Texte.pdf
https://www.gotronic.fr/art-module-bus-can-sbc-can01-28405.htm

-actionneurs
moteur en PWM avec VESC

-multiplexeur NMEA0183 NMEA2000 arduino raspberry
https://kingtidesailing.blogspot.com/2017/08/cheap-arduino-nmea-0183-wind-sensor.html
https://www.framboise314.fr/un-gps-usb-pour-le-raspberry-pi/
https://www.instructables.com/id/How-to-Use-NMEA-0183-With-Raspberry-Pi/
https://voilier-idem.com/accueil/page/58
https://pysselilivet.blogspot.com/2018/03/nmea-wifi-gateway.html


7) Alternative système IOT : windows 10
https://devblogs.microsoft.com/premier-developer/getting-started-with-windows-10-iot-core-raspberry-pi-3b/
https://www.microsoft.com/en-us/software-download/windows10iotcore
https://docs.microsoft.com/fr-fr/windows/iot-core/tutorials/rpi
https://docs.microsoft.com/fr-fr/windows/iot-core/tutorials/adafruitkit


8) command line RASPI :
ls
cd
tree
df -h
git
curl
wget
startx
halt
sudo apt install

9) compiler une application source pour RASPI :
./configure --help
make
make install

10) Mettre à jour la liste des paquets et la mise à niveau de RASPBIAN :
add-apt-repository nomrepositorynonraspbian
sudo apt-get update
apt-get install nompaquet

apt list --upgradable
apt-get upgrade
sudo apt-get dist-upgrade
sudo apt clean
sudo reboot

dpkg --get-selections -l
apt-cache search nompaquet
apt-cache show
apt-get purge nompaquet


11) Ecran 800*480 5 inch HDMI display with usb touch screen :
https://www.youtube.com/watch?v=kxli3TIWau8
http://wiki.52pi.com/index.php/5-Inch-800x480-HDMI-TFT-LCD-Touch-Screen_SKU:Z-0053

modifier /boot/config.txt  :
framebuffer_width=800
framebuffer_height=480
hdmi_force_hotplug=1
hdmi_group=2
hdmi_mode=87
hdmi_cvt  800  480  60  3  0  0  0
device_tree=bcm2710-rpi-3-b-plus.dtb
dtparam=spi=on


12) python pour grove : <ctrl>+z pour break + exit
import time
import grovepi

print(grovepi.version())

# Connect the Grove Rotary Angle Sensor to analog port A0
# SIG,NC,VCC,GND
potentiometer = 0

# Connect the LEDbar to digital port D5
# SIG,NC,VCC,GND
ledbar = 5

grovepi.pinMode(potentiometer,"INPUT")
grovepi.pinMode(ledbar,"OUTPUT")
time.sleep(1)
i=0

# Reference voltage of ADC is 5v
adc_ref = 5

# Vcc of the grove interface is normally 5v
grove_vcc = 5

# Full value of the rotary angle is 300 degrees, as per it's specs (0 to 300)
full_angle = 300

while True:
    try:
        #init ledbar
        grovepi.ledBar_init(ledbar,1)

        for i in range(0,11):
         # Read sensor value from potentiometer
         #sensor_value = grovepi.analogRead(potentiometer)
         sensor_value = i*102.3

         # Calculate voltage echantillonnage 10bits (1023)
         voltage = round((float)(sensor_value) * adc_ref / 1023, 2)

         # Calculate rotation in degrees (0 to 300)
         degrees = round((voltage * full_angle) / grove_vcc, 2)

         # Calculate LEDbar level (0 to 10) from degrees (0 to 300)
         brightness = int(degrees / full_angle * 10)

         # Give PWM output to LED
         grovepi.ledBar_setLevel(ledbar,brightness)

         print("sensor_value = %d voltage = %.2f degrees = %.1f brightness = %d" %(sensor_value, voltage, degrees, brightness))
         time.sleep(.2)

        grovepi.ledBar_setBits(ledbar,0)
        break

    except KeyboardInterrupt:
        grovepi.ledBar_setBits(ledbar,0)
        break
    except IOError:
        print ("Error")
        
13) fonctions grovepi:
grovepi.digitalRead(pin)
grovepi.digitalWrite(pin, value)
grovepi.analogRead(pin)
grovepi.analogWrite(pin, value)
grovepi.pinMode(pin, mode)

14) PWM logiciel :
#pour moteur DC avec 2 fils sur pin12
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(12, GPIO.OUT)
 
p = GPIO.PWM(12, 0.5)
p.start(1)
input('Press return to stop:')   # use raw_input for Python 2
p.stop()
GPIO.cleanup()
 
An example to brighten/dim an LED:
#pour LED avec 2 fils sur pin12
import time
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(12, GPIO.OUT)
 
p = GPIO.PWM(12, 50)  # channel=12 frequency=50Hz
p.start(0)
try:
    while 1:
        for dc in range(0, 101, 5):
            p.ChangeDutyCycle(dc)
            time.sleep(0.1)
        for dc in range(100, -1, -5):
            p.ChangeDutyCycle(dc)
            time.sleep(0.1)
except KeyboardInterrupt:
    pass
p.stop()
GPIO.cleanup()

15) Gear stepper motor driver pack
# Import required libraries
import sys
import time
import RPi.GPIO as GPIO

# define variables
chan_list = [17,27,22,23] # GPIO ports to use
delay=.001 # delay between each sequence step

# Use BCM GPIO references
# instead of physical pin numbers
GPIO.setmode(GPIO.BCM)

# Set all pins as output
for pin in chan_list:
  print "Setup pins"
  GPIO.setup(pin,GPIO.OUT)

GPIO.output(chan_list, (0,0,0,0))

#initialize array for sequence shift
arr1 = [1,0,0,0]
arr2 = [1,0,0,1]
arr3 = [0,0,0,1]

def move(argv):
  global arr1 # enables the edit of arr1 var inside a function
  global arr2 # enables the edit of arr2 var inside a function
  global arr3 # enables the edit of arr3 var inside a function
  if argv == "-":
    arrOUT = arr3[3:]+arr3[:3] # opposite rotates array values of 1 digit
    arr3 = arr2
    arr2 = arrOUT
  else:
    arrOUT = arr1[1:]+arr1[:1] # rotates array values of 1 digit
    arr1 = arr2
    arr2 = arrOUT

  GPIO.output(chan_list, arrOUT)
  #print ("pin stepper = %s" %(arrOUT))
  time.sleep(delay)

# Start main loop
while True:
  try:
   if len(sys.argv) > 1:
     move(sys.argv[1])
   else:
     move("+")

  except KeyboardInterrupt:
    GPIO.output(chan_list, (0,0,0,0))
    GPIO.cleanup()
    sys.exit()

16) PWM hardware Adafruit 16-Channel 12-bit PWM en I2C
