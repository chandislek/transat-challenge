
#AUTOMATE EMBARQUE RASPBERRY 3B+ 'Raspberry Pi 3 B Plus'

1)Système d'exploitation : LINUX
https://www.raspberrypi.org/downloads/
l'image RASPBIAN est enregistrée une carte SDmini
avec SSH activé , login pi , hostname raspberrypi, raspberry

connection par terminal texte depuis PC @raspberrypi:
https://www.putty.org/

connexion par VNC depuis terminal PC avec serverVNC activé:
sudo raspi-config
aller dans menu"interfacing option""VNC"

connection par VNCviewer sur PC @raspberrypi:
https://www.realvnc.com/fr/connect/download/viewer/windows/

la création d'un fichier de programme python3 : 
sudo nano chandislek.py
exécution du fichier :
sudo python chandislek.py
affiche un fichier :
cat chandislek.py

carte extension capteur : GROVEPI+ dexter seeed Arduino Uno 
https://www.youtube.com/watch?v=lsaXVRk6mKE
Brancher carte grovepi plus ;
En terminal : Autoriser I2c dans sudo raspi-config

récupérer des fichiers sur internet et installation de la bibliothèque grovepi de DEXTER :
curl -kL dexterindustries.com/update_grovepi | bash
ou récupérer le repository grovepi :
mkdir ~/Dexter
cd /home/pi/Dexter
git clone https://github.com/DexterInd/GrovePi.git
cd /home/pi/Dexter/GrovePi/Script
bash ./update_grovepi.sh
ou la bibliothèque grovepi de SEEED:
curl -sL https://github.com/Seeed-Studio/grove.py/raw/master/install.sh | sudo bash -s –
git clone https://github.com/Seeed-Studio/Grove_Base_Kit_Sketchbook

flash le dernier firmware dans GrovePi Arduino :
cd /home/pi/Dexter/GrovePi/Firmware
bash firmware_update.sh

documentation API : 
https://seeed-studio.github.io/grove.py/

forum :
https://forum.seeedstudio.com/

vérification liaison RASPI-GROVEPI+ :
sudo i2cdetect -y 1
test LCD :
cd /home/pi/Dexter/GrovePi/Software/Python/grove_rgb_lcd
python grove_rgb_lcd.py

Vérification liaison SPI :
ls -l /dev/spidev*

broches du RASPI (26 ou 40) :
pour motorisation ESC en PWM, 12
série UART TX-RX RPIser, 8-10
I2C, 3-5
SPI, 19-21-23-24-26
GPIO, 7-11-13-15-12-16-18-22
GPIO étendu, 29-31-33-35-37-32-36-38-40
DNC, 27-28

connection des modules grove :
Grove – Relay > D2
Grove – Temp&Humi Sensor > D3
Grove – Ultrasonic Ranger > D4
Grove – LED Bar V2.0 > D5        sudo python ledbar.py
Grove – Buzzer > D6
Grove – Button > D7
Grove – Rotary Angle Sensor > A0 sudo python rotary.py
Grove – Sound Sensor > A1
Grove – Light Sensor > A2
Grove – LCD Display > I2C


2) Lecture des fichiers météorologiques : GRIB 2
https://confluence.ecmwf.int//display/ECC/ecCodes+Home
l'interface en Python3 des ecCodes se fait conformément à  PyPI https://pypi.org/project/eccodes/

les prévisions sont disponibles librement sur météoFrance
https://donneespubliques.meteofrance.fr/?fond=produit&id_produit=130&id_rubrique=51

3) système surveillance vidéo: motionEyeOS
https://github.com/ccrisan/motioneyeos/wiki

4) système détection d'obstacle : YOLO darknet et VPU MOVIDIUS NCS 2
bibliothèque VPU : openVino
bibliothèque détection d'obstacle : opencv

5)système d'exploitation navigation : openplotter
http://www.sailoog.com/openplotter
https://openplotter.readthedocs.io/en/latest/getting_started/downloading.html

logiciel traceur : openCPN
https://opencpn.org/OpenCPN/info/downloads.html
autopilote: 
http://pypilot.org/wiki/doku.php

6)carte d'interface physique :
-capteurs
module GROVE et CAN NMEA
-actionneurs
moteur en PWM avec VESC

7) Alternative système IOT : windows 10
https://devblogs.microsoft.com/premier-developer/getting-started-with-windows-10-iot-core-raspberry-pi-3b/
https://www.microsoft.com/en-us/software-download/windows10iotcore
https://docs.microsoft.com/fr-fr/windows/iot-core/tutorials/rpi
https://docs.microsoft.com/fr-fr/windows/iot-core/tutorials/adafruitkit

8) command line RASPI :
ls
cd
tree
df -h
git
curl
startx
halt

9) compiler une application source pour RASPI :
./configure --help
make
make install

10) Mettre à jour la liste des paquets et la mise à niveau de RASPBIAN :
add-apt-repository nomrepositorynonraspbian
sudo apt-get update
apt-get install nompaquet

apt list --upgradable
apt-get upgrade
sudo apt-get dist-upgrade
sudo apt clean
sudo reboot

dpkg --get-selections -l
apt-cache search nompaquet
apt-cache show
apt-get purge nompaquet

11) Ecran 800*480 5 inch HDMI display with usb touch screen :
https://www.youtube.com/watch?v=kxli3TIWau8
http://wiki.52pi.com/index.php/5-Inch-800x480-HDMI-TFT-LCD-Touch-Screen_SKU:Z-0053

modifier /boot/config.txt  :
framebuffer_width=800
framebuffer_height=480
hdmi_force_hotplug=1
hdmi_group=2
hdmi_mode=87
hdmi_cvt  800  480  60  3  0  0  0
device_tree=bcm2710-rpi-3-b-plus.dtb
dtparam=spi=on

12) python pour grove : <ctrl>+z pour break + exit
import time
import grovepi

print(grovepi.version())

# Connect the Grove Rotary Angle Sensor to analog port A0
# SIG,NC,VCC,GND
potentiometer = 0

# Connect the LEDbar to digital port D5
# SIG,NC,VCC,GND
ledbar = 5

grovepi.pinMode(potentiometer,"INPUT")
grovepi.pinMode(ledbar,"OUTPUT")
time.sleep(1)
i=0

# Reference voltage of ADC is 5v
adc_ref = 5

# Vcc of the grove interface is normally 5v
grove_vcc = 5

# Full value of the rotary angle is 300 degrees, as per it's specs (0 to 300)
full_angle = 300

while True:
    try:
        #init ledbar
        grovepi.ledBar_init(ledbar,1)

        for i in range(0,11):
         # Read sensor value from potentiometer
         #sensor_value = grovepi.analogRead(potentiometer)
         sensor_value = i*102.3

         # Calculate voltage echantillonnage 10bits (1023)
         voltage = round((float)(sensor_value) * adc_ref / 1023, 2)

         # Calculate rotation in degrees (0 to 300)
         degrees = round((voltage * full_angle) / grove_vcc, 2)

         # Calculate LEDbar level (0 to 10) from degrees (0 to 300)
         brightness = int(degrees / full_angle * 10)

         # Give PWM output to LED
         grovepi.ledBar_setLevel(ledbar,brightness)

         print("sensor_value = %d voltage = %.2f degrees = %.1f brightness = %d" %(sensor_value, voltage, degrees, brightness))
         time.sleep(.2)

        grovepi.ledBar_setBits(ledbar,0)
        break

    except KeyboardInterrupt:
        grovepi.ledBar_setBits(ledbar,0)
        break
    except IOError:
        print ("Error")
        
13) fonctions grovepi:
grovepi.digitalRead(pin)
grovepi.digitalWrite(pin, value)
grovepi.analogRead(pin)
grovepi.analogWrite(pin, value)
grovepi.pinMode(pin, mode)

14) PWM logiciel :
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(12, GPIO.OUT)
 
p = GPIO.PWM(12, 0.5)
p.start(1)
input('Press return to stop:')   # use raw_input for Python 2
p.stop()
GPIO.cleanup()
 
An example to brighten/dim an LED:
 
import time
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(12, GPIO.OUT)
 
p = GPIO.PWM(12, 50)  # channel=12 frequency=50Hz
p.start(0)
try:
    while 1:
        for dc in range(0, 101, 5):
            p.ChangeDutyCycle(dc)
            time.sleep(0.1)
        for dc in range(100, -1, -5):
            p.ChangeDutyCycle(dc)
            time.sleep(0.1)
except KeyboardInterrupt:
    pass
p.stop()
GPIO.cleanup()

15) PWM hardware Adafruit 16-Channel 12-bit PWM en I2C
